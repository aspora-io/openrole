name: Deploy OpenRole.net (Docker)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production
      branch:
        description: 'Branch to deploy'
        required: true
        default: '001-cv-profile-tools'
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          # Create deployment script
          cat << 'DEPLOY_SCRIPT' > deploy-remote.sh
          #!/bin/bash
          set -e
          
          DEPLOY_DIR="$HOME/apps/openrole-${{ github.event.inputs.environment }}"
          RELEASE_DIR="release-$(date +%Y%m%d-%H%M%S)"
          
          echo "üöÄ Starting Docker-based deployment..."
          
          # Create directories
          mkdir -p $DEPLOY_DIR/{releases,logs}
          cd $DEPLOY_DIR
          
          # Clone repository (using public URL)
          echo "üì¶ Cloning repository..."
          git clone --depth 1 --branch ${{ github.event.inputs.branch }} https://github.com/aspora-io/openrole.git releases/$RELEASE_DIR
          cd releases/$RELEASE_DIR
          
          # Create production env file
          cat > .env.production << EOF
          NODE_ENV=production
          NEXT_PUBLIC_API_URL=https://api.openrole.net
          EOF
          
          # Stop existing containers
          if [ -L "$DEPLOY_DIR/current" ]; then
            cd $DEPLOY_DIR/current
            docker-compose -f docker-compose.traefik.yml down || true
          fi
          
          # Update symlink
          cd $DEPLOY_DIR
          rm -f current
          ln -sf releases/$RELEASE_DIR current
          
          # Start new containers
          cd current
          echo "üê≥ Building and starting containers..."
          docker-compose -f docker-compose.traefik.yml up -d --build
          
          # Wait for containers to start
          sleep 10
          
          # Check container status
          echo "üìä Container status:"
          docker ps | grep openrole || echo "No OpenRole containers found"
          
          # Cleanup old releases (keep last 5)
          cd $DEPLOY_DIR/releases
          ls -t | tail -n +6 | xargs -r rm -rf
          
          echo "‚úÖ Docker deployment completed!"
          DEPLOY_SCRIPT
          
          # Copy and execute deployment script
          scp deploy-remote.sh ${{ secrets.USERNAME }}@${{ secrets.HOST }}:/tmp/
          ssh ${{ secrets.USERNAME }}@${{ secrets.HOST }} "bash /tmp/deploy-remote.sh && rm /tmp/deploy-remote.sh"

      - name: Health check
        run: |
          sleep 15
          
          # Check if containers are running
          ssh ${{ secrets.USERNAME }}@${{ secrets.HOST }} "
            echo 'üîç Checking deployment status...'
            docker ps | grep openrole || echo '‚ö†Ô∏è  No OpenRole containers running'
            
            echo ''
            echo 'üìã Container logs (last 10 lines):'
            docker logs openrole-web 2>&1 | tail -10 || echo 'Web container not found'
            echo '---'
            docker logs openrole-api 2>&1 | tail -10 || echo 'API container not found'
          "
          
          # Test endpoints
          echo ""
          echo "üåê Testing endpoints:"
          curl -s -o /dev/null -w "HTTPS Status: %{http_code}\n" https://openrole.net || echo "Failed to reach https://openrole.net"
          curl -s -o /dev/null -w "API Status: %{http_code}\n" https://api.openrole.net/health || echo "Failed to reach API"

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa
          rm -f deploy-remote.sh

      - name: Deployment summary
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "# üöÄ Deployment Successful!"
            echo ""
            echo "**Environment:** ${{ github.event.inputs.environment }}"
            echo "**Branch:** ${{ github.event.inputs.branch }}"
            echo "**Time:** $(date)"
            echo ""
            echo "## üåê Access URLs:"
            echo "- Web: https://openrole.net"
            echo "- API: https://api.openrole.net"
            echo ""
            echo "## üìã Next Steps:"
            echo "1. Verify the site is accessible"
            echo "2. Check container logs if needed: \`docker logs openrole-web\`"
            echo "3. Monitor application health"
          else
            echo "# ‚ùå Deployment Failed"
            echo ""
            echo "Please check the logs above for error details."
            echo ""
            echo "## üîß Troubleshooting:"
            echo "1. Check SSH connectivity"
            echo "2. Verify Docker is installed on server"
            echo "3. Check disk space on server"
            echo "4. Review container build logs"
          fi