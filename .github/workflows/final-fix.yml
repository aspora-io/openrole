name: Final Fix - OpenRole.net

on:
  workflow_dispatch:

jobs:
  fix:
    runs-on: ubuntu-latest
    
    steps:
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

      - name: Final fix deployment
        run: |
          ssh ${{ secrets.USERNAME }}@${{ secrets.HOST }} << 'EOF'
            set -e
            
            echo "üîß Final fix for OpenRole.net container naming..."
            
            # Stop ALL containers that might conflict
            echo "Cleaning up all existing containers..."
            docker stop $(docker ps -q) 2>/dev/null || true
            docker container prune -f 2>/dev/null || true
            
            # Ensure Traefik network exists
            docker network create traefik 2>/dev/null || echo "Traefik network exists"
            
            # Go to current deployment directory
            cd ~/apps/openrole-production/current
            
            # Create a fixed docker-compose override
            cat > docker-compose.override.yml << 'OVERRIDE'
          version: '3.8'
          
          services:
            openrole-web:
              container_name: openrole-web
              networks:
                - traefik
              labels:
                - "traefik.enable=true"
                - "traefik.http.routers.openrole-web.rule=Host(\`openrole.net\`) || Host(\`www.openrole.net\`)"
                - "traefik.http.routers.openrole-web.entrypoints=websecure"
                - "traefik.http.routers.openrole-web.tls.certresolver=letsencrypt"
                - "traefik.http.services.openrole-web.loadbalancer.server.port=3000"
                - "traefik.docker.network=traefik"
              
            openrole-api:
              container_name: openrole-api
              networks:
                - traefik
              labels:
                - "traefik.enable=true"
                - "traefik.http.routers.openrole-api.rule=Host(\`api.openrole.net\`)"
                - "traefik.http.routers.openrole-api.entrypoints=websecure"
                - "traefik.http.routers.openrole-api.tls.certresolver=letsencrypt"
                - "traefik.http.services.openrole-api.loadbalancer.server.port=3001"
                - "traefik.docker.network=traefik"
          
          networks:
            traefik:
              external: true
          OVERRIDE
            
            # Start containers with explicit names
            echo "Starting containers with fixed names..."
            docker-compose -f docker-compose.traefik.yml -f docker-compose.override.yml up -d --build
            
            # Wait for containers to be ready
            sleep 25
            
            echo ""
            echo "üìä Final container status:"
            docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
            
            echo ""
            echo "üîó Traefik network connections:"
            docker network inspect traefik --format '{{range .Containers}}{{.Name}} {{end}}' | tr ' ' '\n' | grep -E "openrole|web|api" || echo "No OpenRole containers found in Traefik network"
            
            echo ""
            echo "üîç Container health check:"
            echo "--- Web Container ---"
            docker logs openrole-web --tail 3 2>/dev/null || echo "Web container not found"
            echo "--- API Container ---"
            docker logs openrole-api --tail 3 2>/dev/null || echo "API container not found"
            
            echo ""
            echo "‚úÖ Final fix deployment complete!"
            echo "Containers should now be accessible as:"
            echo "  - openrole-web (https://openrole.net)"
            echo "  - openrole-api (https://api.openrole.net)"
          EOF

      - name: Test fixed endpoints
        run: |
          sleep 30
          echo "üåê Testing fixed deployment:"
          
          # Test both endpoints
          echo "Testing web endpoint..."
          WEB_STATUS=$(curl -s -k -o /dev/null -w "%{http_code}" --max-time 15 https://openrole.net || echo "000")
          echo "Web response: $WEB_STATUS"
          
          echo "Testing API endpoint..."
          API_STATUS=$(curl -s -k -o /dev/null -w "%{http_code}" --max-time 15 https://api.openrole.net/health || echo "000")
          echo "API response: $API_STATUS"
          
          # Get actual content if working
          if [ "$WEB_STATUS" = "200" ]; then
            echo ""
            echo "üéâ SUCCESS! Getting page content..."
            curl -s -k https://openrole.net | grep -o '<title>.*</title>' || echo "No title found"
          else
            echo ""
            echo "‚ÑπÔ∏è  Response content sample:"
            timeout 10 curl -s -k https://openrole.net | head -3 || echo "No response"
          fi

      - name: Cleanup
        if: always()
        run: rm -f ~/.ssh/id_rsa