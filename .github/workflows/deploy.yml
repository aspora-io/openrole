name: Deploy OpenRole.net

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Verify repository structure
        run: |
          echo "Repository contents:"
          ls -la
          echo "Package.json exists:"
          cat package.json

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          # Deploy using Docker on the server (simpler approach)
          ssh ${{ secrets.USERNAME }}@${{ secrets.HOST }} "
            echo 'üöÄ Starting Docker deployment...'
            
            # Create deployment directory
            mkdir -p ~/apps/openrole-${{ github.event.inputs.environment }}
            cd ~/apps/openrole-${{ github.event.inputs.environment }}
            
            # Clone/update repository
            if [ -d 'openrole' ]; then
              cd openrole
              git fetch origin
              git checkout ${{ github.event.inputs.branch }}
              git pull origin ${{ github.event.inputs.branch }}
            else
              git clone https://github.com/aspora-io/openrole.git
              cd openrole
              git checkout ${{ github.event.inputs.branch }}
            fi
            
            # Stop existing containers
            docker-compose -f docker-compose.traefik.yml down || echo 'No containers to stop'
            
            # Build and start new containers
            docker-compose -f docker-compose.traefik.yml up -d --build
            
            echo '‚úÖ Docker deployment completed!'
            echo 'Environment: ${{ github.event.inputs.environment }}'
            echo 'Branch: ${{ github.event.inputs.branch }}'
            
            # Show container status
            docker ps | grep openrole || echo 'OpenRole containers starting...'
          "

      - name: Health check
        run: |
          # Wait for containers to start
          echo "Waiting 30 seconds for containers to start..."
          sleep 30
          
          # Check if containers are running and test endpoints
          ssh ${{ secrets.USERNAME }}@${{ secrets.HOST }} "
            echo 'Checking container status...'
            docker ps | grep openrole
            
            echo 'Testing endpoints...'
            curl -f https://openrole.net || echo 'Website not yet ready'
            curl -f https://api.openrole.net/health || echo 'API health check not yet ready'
            
            echo '‚úÖ Deployment verification complete'
          "

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa

      - name: Deployment notification
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "üöÄ Successfully deployed OpenRole.net to ${{ github.event.inputs.environment }}"
            echo "Branch: ${{ github.event.inputs.branch }}"
            echo "Time: $(date)"
          else
            echo "‚ùå Deployment failed"
          fi